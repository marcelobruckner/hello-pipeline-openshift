apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-commit-mainfest
  namespace: luis-bruckner-dev # Certifique-se de usar o namespace correto
  labels:
    app.kubernetes.io/version: "1.0"
  annotations:
    tekton.dev/categories: Deployment
    tekton.dev/tags: kustomize, kubernetes
    tekton.dev/displayName: update-commit-manifest
spec:
  description: >
    Atualiza manifestos Kubernetes com Kustomize, alterando a imagem para um novo SHA ou tag.
    Comita e envia para o GitHub as altera√ß√µes feitas nos manifestos Kubernetes.

  params:
    - name: GIT_REPO_GITOPS
      description: "URL do reposit√≥rio Git"
      # default: "https://github.com/marcelobruckner/hello-app"

    - name: GIT_BRANCH
      description: "Branch para onde enviar as altera√ß√µes"
      # default: "main"

    - name: GIT_USER_NAME
      description: "Nome do usu√°rio do Git"
      # default: "Openshift Bot"

    - name: GIT_USER_EMAIL
      description: "E-mail do usu√°rio do Git"

    - name: DIGEST
      description: "SHA da imagem a ser atualizada no Kustomize (ex: sha256:abcd123)"

    - name: IMAGE
      description: "aqui entra o registry. ex: docker.io/marcelobruckner/hello"

    - name: KUSTOMIZE_PATH
      description: "Caminho onde est√° o kustomization.yaml"
      # default: "."

  workspaces:
    - name: source-gitops
      description: "Workspace contendo os arquivos do Kustomize"

  steps:
    - name: git-clone-repository-gitops
      image: alpine/git:latest
      workingDir: $(workspaces.source-gitops.path)
      script: |
        #!/bin/sh
        set -e

        echo "üîÑ Git-clone do repo $(params.GIT_REPO_GITOPS) na branch $(params.GIT_BRANCH)"
        echo "üìÅ Diret√≥rio atual: $(pwd)"

        # ls -la

        if [ -d "repo" ]; then
          echo "üßπ Diret√≥rio 'repo' j√° existe. Removendo..."
          rm -rf repo
        fi

        git clone $(params.GIT_REPO_GITOPS) -b $(params.GIT_BRANCH) --single-branch --depth 1 repo

    - name: update-manifest-with-kustomize
      image: registry.k8s.io/kustomize/kustomize:v5.0.0
      workingDir: $(workspaces.source-gitops.path)/repo/gitops
      script: |
        #!/bin/sh
        set -e

        echo "üìÇ Diret√≥rio atual antes do cd: $(pwd)"
        cd $(workspaces.source-gitops.path)/repo/$(params.KUSTOMIZE_PATH)

        echo "üìÇ Diret√≥rio ap√≥s cd: $(pwd)"
        echo "üîç Verificando exist√™ncia de kustomization.yaml..."
        ls -la

        echo "üîÑ Atualizando imagem no Kustomize..."
        kustomize edit set image $(params.IMAGE)=$(params.IMAGE):$(params.DIGEST)

        echo "‚úÖ Kustomization atualizado com sucesso!"
        cat kustomization.yaml

    - name: git-commit-manifest-gitops
      image: alpine/git:latest
      workingDir: $(workspaces.source-gitops.path)/repo
      script: |
        #!/bin/sh
        set -e

        echo "üîß Configurando Git..."

        echo "üìÇ Diret√≥rio atual antes do cd: $(pwd)"
        cd $(workspaces.source-gitops.path)/repo

        echo "üìÇ Diret√≥rio ap√≥s cd: $(pwd)"

        ls -la

        git status
        git config user.name "$(params.GIT_USER_NAME)"
        git config user.email "$(params.GIT_USER_EMAIL)"

        # echo "‚ûï Adicionando altera√ß√µes..."
        git add .

        # echo "üì¶ Commitando altera√ß√µes..."
        git commit -m "Atualiza manifest com nova imagem: $(params.IMAGE)@$(params.DIGEST)" || echo "Nenhuma altera√ß√£o para commit."

        # echo "üöÄ Enviando para o reposit√≥rio remoto..."
        git push origin $(params.GIT_BRANCH)
